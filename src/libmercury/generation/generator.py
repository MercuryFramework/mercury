from colorama import Fore, Style
from json import loads, dumps
from time import time

def gen_log(message):
    print(f"{Fore.CYAN}[GENERATOR]{Style.RESET_ALL} {message}")

def generate_user():
    table_name = input("What should be the table's name: ")
    username_field = input("What should the username field be called: ")
    password_field = input("What should the password field be called: ") 
    isHashed = input("Is the password hashed? (y/n): ")
    isEmail = input("Is there an email field? (y/n): ")
    email_field = ""
    email_command = ""
    if isEmail.lower().strip() == "y":
        email_field = input("What should the email field be called: ")
        email_command = f"{email_field} = String(318)"

    if isHashed.lower().strip() == "n":
        with open(f"src/cargo/{table_name}Model.py", "w") as f:
            f.write(f"""#Generated by libmercury at {int(time())}
from libmercury.db import Column, Integer, Base, String

class {table_name}(Base):
    __tablename__ = "{table_name}"
    id = Column(Integer, primary_key=True)
    {username_field} = Column(String(20))
    {password_field} = Column(String(50))
    {email_command}
""")    
    elif isHashed.lower().strip() == "y":
        salt_field = input("What should the salt be called: ")
        with open(f"src/cargo/{table_name}Model.py", "w") as f:
            f.write(f"""#Generated by libmercury at {int(time())} 
from libmercury.db import Column, Integer, Base, String
from libmercury.security import generate_salt, hash_password, verify_password
import base64

class {table_name}(Base):
    __tablename__ = "{table_name}"
    id = Column(Integer, primary_key=True)
    {username_field} = Column(String(20))
    {password_field} = Column(String(50))
    {salt_field} = Column(String, nullable=False)
    {email_command}

    def set_password(self, password: str):
        self.{salt_field} = base64.b64encode(generate_salt()).decode('utf-8')
        self.{password_field} = hash_password(password, base64.b64decode(self.salt))

    def check_password(self, password: str) -> bool:
        return verify_password(self.{password_field}, password, base64.b64decode(self.{salt_field}))""")

    #Update Map.json
    with open("map.json", "r") as f:
        map_json = loads(f.read())
        map_json["models"].append(f"src/cargo/{table_name}Model.py")
    with open("map.json", "w") as f:
        f.write(dumps(map_json))

    gen_log("Successfully created model")

def generate_login():
    pass

def generate_register():
    pass

def generate_password_reset():
    pass

def generate_crud():
    pass

def generate(name):
    generatable = {
        "model:user": generate_user, #Generates a model User
        "control:login": generate_login, #Generates a login controller with JWT's and validation
        "control:register": generate_register, #Generates a signup controller with JWT's and validation
        "control:password_reset": generate_password_reset, #Generates a password reset controller
        "control:crud": generate_crud, #Generates a CRUD controller for a model
    }
    function = generatable.get(name)
    if not function:
        print(f"{Fore.RED}Error:{Style.RESET_ALL} Function not found")
    else:
        gen_log("Starting generation task")
        function()
